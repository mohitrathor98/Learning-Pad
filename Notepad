Why to learn GO?
    
    -- Code runs fast
        --> It is a compiled language with features of interpreted language
    
    -- Garbage Collection
        --> Automatic memory management
    
    -- Simpler Objects
        --> Go does not use class
        --> It uses structs with associated memory
        --> No inheritence, No Constructor, No Generics
            - Makes code faster
        
    -- Efficient concurrency
        --> concurrency is the management of multiple tasks at the same time.
        --> Go includes concurrency primitives
            --> Goroutines represent concurrent tasks.
            --> Channels are used to communicate between tasks.
            --> Select enables task synchronization.


DOWNLOAD AND INSTALL LINK:: https://golang.org/dl/


Workspace:
    -- src: source code files
    -- pkg: packages(libraries)
    -- bin: contains executables

*******************************************************************************************

#################################################
GO TOOLS:
--------
    - go build: compile the program
                Arguments can be a list of packages or a list of .go giles
                creates an executable for the main package

                go build -o bin/executable-name src/file.go

    - go doc: prints documentation for a package

    - go fmt: formats source code files

    - go get: downloads packages and installs them

    - go list: lists all installed packages

    - go run: compiles and runs the executable

    - go test: runs tests using files ending in "_test.go"
#################################################

- import - keyword used to access other packages
         - It searches directories specified by GOROOT and GOPATH

- There must be one package main.
- Building the main package generates an executable program.
- main package needs a main() function
- main() is where code execution starts

--> Executing go program: go run file.go


Variables:
---------
Names: same as other lang, case-sensitive

declaration: var x int

                var: keyword to declare Variables
                x: name of Variable
                int: data-type

            var x,y int : declare multiple variable on same line

type declaration:
----------------
    - Defining an alias(alternate name)
    - May improve clarity
        type Celsius float64
        type IDnum int

        var temp Celsius // it is clear temp is Celsius type temperature
        var pid IDnum

Reading inputs:
--------------

    --> Scan:   num, err := fmt.Scan(&appleNum)
        ----
                ==> Inputs gets stored in appleNum
                ==> Scan returns two things:    Number of inputs read and error if any(nill if no error)

Intialization:
-------------

    var x int = 100
    var x = 100

    x = 100

    - uninitialized variable have a zero value
    - for string "" Intialization

    x := 100 // declare and intialize as same time
            // according to RHS value, variable type is determined
    // can do this only inside a function

Pointers:
--------

var x int = 1
var y int
var ip *int // ip is poiner to x

ip = &x // ip points to x
y = *ip

New:
---
    --> new() creates variable and returns a pointer to variable

    ptr := new(int)
    *ptr = 3

Dellocating Memory:
------------------

    ---> Local var gets allocated in stack - deallocated after function ends
    ---> Global or dynamically allocated gets to heap --> needs to be explicitely deallocated
            -- Garbage Collector deallocates

Comments : // or /* */
--------

Printing: import from fmt package
--------

fmt.Printf("Hi")
x := "Joe"
fmt.Printf("Hi" + x)

fmt.Printf("Hi %s",x)

Integers:
--------

var x int

int8, int16, int32, int64, uint8, uint16, unit32, unit64

Type Conversions:
----------------

var x int32 = 1
var y int16 = 2

Convert type with T() operation

    x = int32(y)

Complex numbers:
---------------

    var z complex128 = complex(2,3)

ASCII and Unicode:
-----------------
    - Unicode is a 32-bit character code
    - UTF-8 is variable length
        --> 8-bit UTF codes are same as ASCII
    - Code Points - Unicode characters
    - Rune - a code point in GO

Unicode package(import "unicode"):
---------------

--> IsDigit(r rune)
--> IsSpace(r rune)
--> IsLetter(r rune)
--> IsLower(r rune)
--> IsPunct(r rune)

--> ToUpper(r rune)
--> ToLower(r rune)

Strings package(import "strings"):
---------------

--> Compare(a,b) - returns an integer comparing to strings lexicographically.
                 - 0 if a==b
                 - -1 if a<b
                 - +1 if a>b

--> Contains(s, substr) - returns true if substring is inside s
--> HasPreix(s, prefix) - returns true if the string s begin with prefix
--> Index(s, substr) - returns the index of the first instance of substr in s

String Manipulation(import "strings"):
-------------------

    --> Strings are immutable, but modified strings are returned

    --> Replace(s, old, new, n) - replace returns a copy of string s with first n instances
                                  of old replaced by new
    --> ToLower(s) - returns string
    --> ToUpper(s) - returns string
    --> TrimSpace(s) - returns a new string with all leading and trailing white space removed

Strconv package (import "strconv"):
---------------

    --> Conversions to and from string representations of basic data types

    --> Atoi(s) - converts string s to int
    --> Itoa(s) - converts int(base 10) to string
    --> FormatFloat(f,fmt,prec,bitSize) - converts floating point number to a string
    --> ParseFloat(s, bitSize) - converts a string to a floating point number
*******************************************************************************************