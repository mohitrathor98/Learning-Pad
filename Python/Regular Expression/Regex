++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
MetaCharacters
--------------
    --> Interpreted in a special way by a RegEx engine

    [] - Square brackets
    =====================
        --> specifies a set of characters we wish to match

        Expression : [abc]
                     String: 'a'        : 1 match
                     String: 'ac'       : 2 matches
                     String: 'Hey Jude' : No Match
                     String: 'abc de ca': 5 matches

    Range of characters(-):
    =======================
        --> [a-e] : [abcde]
        --> [0-39] : [01239]

    Complement(^) {caret symbol at the start of the square bracket means negation}
    =============
        --> [^abc] : any char except a,b or c
        --> [^0-9] : any non-digit char

    Period(.)
    =========
        --> Mathches any single character, except newline "\n"

        Expression: '..' {matches any two chars except new line}
                    String: a       : No match
                    String: ac      : 1 match
                    String: acd     : 1 match
                    String: abcd    : 2 match

    Caret(^)
    ========
        --> Used to check if a string starts with certain character

        Expression: '^ab'
        ==========
                    String: abc : 1 match
                    String: acb : No match

    Dollar($)
    =========
        --> used to check if string ends with a certain char

        Expression: 'a$'
                    String: a       : 1 match
                    String: formula : 1 match
                    String: cab     : No match

    Star(*)
    =======
        --> zero or more occurences of the pattern

        Expression: 'ma*n' (m then zero or more occurences of a followed by n)
                    String: mn      : 1 match
                    String: man     : 1 match
                    String: maan    : 1 match
                    String: main    : No match (a is not followed by n)
                    String: Woman   : 1 match

    Plus(+)
    =======
        --> one or more occurences of the pattern

        Expression: 'ma+n' (m then one or more occurence of a follwed by n)
                    String: mn      : No match(no 'a' character)
                    String: man     : 1 match
                    String: maaan   : 1 match
                    String: main    : No match(a is not followed by n)
                    String: Woman   : 1 match

    Question Mark(?)
    ================
        --> Matches zero or one occurence of the pattern

        Expression: 'ma?n' (m then zero or one occurence of a followed by n)
                    String: mn      : 1 match
                    String: man     : 1 match
                    String: maaan   : no match(more than 1 a)
                    String: main    : No match
                    String: Woman   : 1 match

    Braces({})
    ========
        --> {n,m} : at least n, and at most m repetitions of the pattern

        Expression: 'a{2,3}' (Atleast 2 repetitions of a and atmost 3 repetitions of a)
                    String: abc dat             : No match
                    String: abc daat            : 1 match(at daat)
                    String: aabc daaat          : 2 matches(at aabc and daaat)
                    String: aabc daaaat         : 2 matches (at aabbc and daaa)
                    String: aabc daaaaat        : 3 matches(at aabc, daaa and aat)

        Expression: '[0-9]{2,4}' (matches atleast 2 digits but not more than 4)
                    String: ab123csde           : 1 match(match at ab123csde)
                    String: 12 and 1345673      : 3 matches(12,3456,73)
                    String: 1 and 2             : No match

    Alternation(|)
    ===========
        --> or operator
        
        Expression: 'a|b' (either a or b)
                    String: cde     : No match
                    String: ade     : 1 match (a in ade)
                    String: acbdea : 3 match

    Group(())
    =====
        --> Parantheses used to group sub-patterns

        Expression: (a|b|c)xz {any string that matches either a or b or c followed by xz}
                    String: ab xz       : No match
                    String: abxz        : 1 match(match at abxz)
                    String: axz cabxz   : 2 matches (axz and bxz)                 
    
    Backslash(\)
    =========
        --> To escape various characters

        '\$a' : match if a string contains $ followed by a
          |---> $ is not being interpreted in a special way

    
    Special Sequences:
    =================
        -- '\A' : Matches if specified characters are at the start of a string

            Expression: '\Athe'
                        String: the sun     : match
                        String: In the sun  : no match

        -- '\b' : Matches if specified character are at the beginning or end of a word

            Expression: '\bfoo' {foo at the beggining of any word}
                        String: football    : Match
                        String: a football  : Match
                        String: afootball   : No Match

            Expression: 'foo\b' {foo at the end of any word}
                        String: the foo         : Match
                        String: the afoo test   : Match
                        String: the afootest    : No Match

        -- '\B' : opposite of \b.
                  Matches if specified characters are not at the beginning or end of a word

        -- '\d' : matches any decimal digit
                  Equivalent to [0-9]

                  Expression: '\d'
                            String: 12abc3  :  3 matches
                            String: Python  :   No match

        -- '\D' : matches any non-decimal digit

        -- '\s' : matches whitespace character in a string
        -- '\S' : matches all non-white characters in a string

        -- '\w' : matches any alphanumeric chars
                  Equivalent to [a-zA-Z0-9_]
                  '_' is also an alpha-numeric character

        -- '\W' : any non-alphanumeric character

        -- '\Z' : matches any specified character at the end of the string
                 
                 Ex: Python\Z :: I like Python :: match
                              :: I like python programming :: no match
