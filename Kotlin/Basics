Variable:
--------
    --> All variables are object

    --> statically types(Type of variable must be determined during compile time)

        1.1 Meta type       : explicitely mentioning the type
            |-> var n:Int = 12
        1.2 TypeInference   : Based on the value, compiler will interpret
            |-> var n = 12
    
    --> Global & Local variable --> can have both implicit  and explicit assignment
        |-> must have an implicit assignment

        implicit assignment: declaration and definition in one line

    Variable Declaration & definition:      val a: Int = 10000
                                            val d: Double = 100.00
                                            val f: Float = 100.00f
                                            val l: Long = 1000000004
                                            val s: Short = 10
                                            val b: Byte = 1

    Type of variable: variableName::class.simpleName    // Gives : type
                      variableName::class.qualifiedName // Gives : kotlin.type

    Categorize of variable:
    ----------------------
        1. Numeric
        2. Character    : var s:Char
        3. Boolean      : var s:Boolean
        4. String   : var s:String
            1: Escaped:  " ... " : It evaluates and prints \n,\t etc.

                val text1 ="Hello, JavaTpoint"  
                //or  
                val text2 ="Hello, JavaTpoint\n"  
                //or  
                val text3 ="Hello, \nJavaTpoint"  

            2: Raw: """ .... """ --> It prints \n,\t,etc. Doesn't evaluates it

                val text1 ="""  
                            Welcome   
                            To  
                            JavaTpoint  
                            """  
    Type Conversion:
    ---------------
        -- implicitely all the varaiables as objects

        For numeric conversion: value.toDouble()
            - toByte()
            - toShort()
            - toInt()
            - toLong()
            - toFloat()
            - toDouble()
            - toChar()

        value to string: value.toString()
            

    Non-Nullable type & Nullable type
    =================================
        1.1 Non-Nullable type : cannot accept a null
                |--> Normal variable declaration are non-nullable type(can't be null)

        1.2 Nullable : can accept a null
                |--> var b:String? = "abc" // ? - represents that it can be null
                |--> b = null 

        Elvis Operator(?:):
        --------------
                --> Must be used only with nullable type variables
                
                --> var sString:String = sStr?:"Default";
                            |--> if value of sStr is not NULL then sStr assigned to sString
                            |--> else : "Default" is assigned to sString    

        Safe Call Operator(.?):
        ------------------
                |--> For Nullable type variable is used to perform some operations, it gives error
                |--> We need safe call operator to do that

                -- sStr1.?length : Prints null if Null value, else gives length

        Not-Null Assertion operator(!!):
        -----------------------------
                --> converts any value to a non-null type 
                --> throws an exception if the value is null. (Null-Pointer exception)

                -- val l = b!!.length

        Safe Casts:
        ----------
                |--> Regular casts may result into a ClassCastException if the object is not of the target type
                
                -- val aInt: Int? = a as? Int
                    |-->  return null if the attempt was not successful