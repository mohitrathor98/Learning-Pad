Pinging and Specifying servers in global inventory file
--------------------------------------------------------

==> ping localhost --> to check connectvity

==> ansible all -i 'localhost,' -m ping -c local  --> pinging in ansible
    
    --> -i - Refers to inventory
    --> localhost, - server name, ',' is to specifiy multiple servers
    --> ping - module written in python 
    --> -c - bypassing ssh to work on local 
    --> all - all the machines in the inventory file

==> /etc/ansible/hosts --> global inventory file, used across entire system

    sudo vi /etc/ansible/hosts  --> it has server ip, domain, group of servers,etc

    create a group:
    [local]  --> group name
    localhost --> server name

==> /etc/ansbile/ansible.cfg --> configuration file

    open it and uncomment inventory and give path to hosts inventory file

==> after doing this, we don't need to specify locahost inventory while pinging in ansbile

    ansible all -m ping -c local

==> in hosts inventory file if we specify one more attribute

    [local]
    localhost ansible_connection=local

    we can specifiy connection type as local.

    Then for pinging:: ansible all -m ping 

==> ansible local -m ping or ansible localhost -m ping --> can be used to ping specific server in the inventory file

==> cat /etc/hosts

    127.0.0.1    localhost
    127.0.1.1    devops-virtualbox

    The server has these two names.

    In the inventory file: /etc/ansbile/hosts  --> add the second name also to be used for ssh connection

    -- devops-VirtualBox ansible_user=devops  --> user name for ssh connection

    -- ansible devops-VirtualBox -m ping -k
        --> -k  -- prompts for ssh password

==> sudo vi /etc/hosts
    enter 1 more server, i.e, current machine ip

    192.168.56.102   devopsmachine

    -- ping devopsmachine
    -- ssh devops@192.168.56.102   or    ssh devops@devopsmachine
    -- exit

    -- sudo vi /etc/ansible/hosts

        devopsmachine ansible_host=192.168.56.102  ansible_user=devops --> ansible will get ip from inventory file itself

    -- ansible devopsmachine -m ping -k

    -- ansible all -m ping -k   --> this will now gets ping-pong from all the three servers

==> creating key pair so that for each ssh server we don't have to give password

    -- ssh-keygen
        --> it will generate a private and public key in .ssh directory
    
    -- ssh-copy-id -i /home/devops/.ssh/id_rsa.pub devops@devopsmachine
            --> pushing public key into ssh server
    --> now private key is present in .ssh and public key is present in ssh server, no password is needed

    --> -k is not required now

Making ssh connection password-free in jenkins userspace
--------------------------------------------------------

==> sudo su
    su jenkins

    -- whoami
    -- pwd  --> /var/lib/jenkins  --> anything which is pulled into jenkins is stored here

    -- ping devopsmachine
    -- ssh devops@devopsmachine
    -- exit
    -- ls .ssh --> jenkins userspace has its own .ssh folder, so once again needs to generate keys and 
                   copy the files to ssh server

Creating local confiuration and inventory file
-----------------------------------------------

==> mkdir ansilab

==> vi ansible.cfg
    [defaults]

    inventory = 

==> vi ansiserver  --> inventory file
    [local]

    ansmachine ansible_host=192.168.56.102 ansible_user=devops

==> ansible ansmachine -m ping  --> this will only work in ansilab directory

==============
command module
==============

==> ansible all -m command -a 'echo "hello"'
    --> echoes hello from all machines available in inventory

==> ansible all -m command -a "cat /etc/hosts"
    --> shoes content of hosts from all available machines in inventory

===> Instead of command if we use shell module, same output is thrown
===> even if we don't give any command, it will take shell command by default.

============
file module
============

==> ansible all -m file -a 'path=/home/devops/testfile state=touch' --> creates a file

    state=file --> checks if file exists or not
    state=directory --> creates a directory/checks if exists or not
    state=absent --> removes directory or file


===========
apt module
===========

==> for installing Packages, written in playbook

============
setup module
============

==> ansible ansmachine -m setup
        --> displays all the information regarding ansmachine in key:value pairs