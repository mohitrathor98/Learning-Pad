Ansible Playbook
----------------
    --> combination of server to be configured and actions required


==> sudo vi file.yaml
   --> write all things below in yaml file except for // - comments

    - hosts: ansmachine // server name
      tasks:
      - name: Create a folder
        file: // module name
          path: /home/devops/test
          state: directory
      - name: Create a file inside a folder
        file:
          path: /home/devops/test/testfile
          state: touch

===> execute: ansible-playbook file.yaml
              ansible-playbook file.yaml --syntax-check ==> Checks and prints any syntax error
                                                        ==> it doesn't execute the playbook only checks for error

              ansible-playbook file.yaml --check ==> dry runs the modules without executing it

==> Installing Packages

    - hosts: ansmachine
      tasks:
      - name: install apache
        apt:
          name: apache2
          state: present
          update_cache: yes // sudo apt update
        become: true //apt module will run with sudo previleges

==> execute: ansible-playbook --ask-become-pass apache.yaml ==> asks password for sudo

==> ansible ansmachine -m setup 
    --> returns all the details of ansmachine in key:value pairs
    --> "ansible_user_dir" : key which contains path of user--> /home/devops


==> modifying file creation yaml file using above information:

    - hosts: ansmachine 
      tasks:
      - name: Create a folder
        file: 
          path: "{{ ansible_user_dir }}/test"
          state: directory
      - name: Create a file inside a folder
        file:
          path: "{{ ansible_user_dir }}/test/testfile"
          state: touch

==> Creating own variables

    - hosts: ansmachine 
      vars:
      - file_path: /home/devops
      tasks:
      - name: Create a folder
        file: 
          path: "{{ file_path }}/test"
          state: directory
      - name: Create a file inside a folder
        file:
          path: "{{ file_path }}/test/testfile"
          state: touch
    
==> Invoking handlers

    - hosts: ansmachine 
      vars:
      - file_path: /home/devops
      tasks:
      - name: Create a folder
        file: 
          path: "{{ file_path }}/test"
          state: directory
        notify: Create a file inside a folder
      handlers:
      - name: Create a file inside a folder
        file:
          path: "{{ file_path }}/test/testfile"
          state: touch

    ==> notify invokes the handler only if task makes any change
    ==> can be used if after changes we need to reload configuration file

=============================
Running Playbook from jenkins
=============================

==> Here using a local repo is shown.

    Create a local repo
        mkdir gitrepo
        git init
        git config user.name devops
        ...

        cat file.yaml

    - hosts: devopsmachine 
      vars:
      - file_path: /home/devops
      tasks:
      - name: Create a folder
        file: 
          path: "{{ file_path }}/test"
          state: directory
        notify: Create a file inside a folder
      handlers:
      - name: Create a file inside a folder
        file:
          path: "{{ file_path }}/test/testfile"
          state: touch

    Commit the code

==>  Start jenkins 192.168.56.102:8080
        Create new project
        Configure:
            Source code management: provide local repo link in git section:: /home/devops/gitrepo

        Build Now

    --> This will pull the files from local repo

==> To run playbook:

    Go to dashboard ==> configure ==> manage plugins ==> Install ansible with install after restart option

    systemctl restart jenkins

    Go to project ==> configure ==> Source code management ==> at the bottom build drop down ==> Ansible playbook
    --> Give file name in playbook path as palybook is present in /var/lib/jenkins/workspace/projectname

    Build now --> Ansible playboook will run

========
Roles
========

 --> Roles are the strucutred way of writing playbooks

==> mkdir roles
    vi ansilab/ansible.cfg

    roles_path = /home/devops/ansilab/roles

    mkdir roles/sample --> home directory for sample role
    mkdir roles/sample/tasks
    mkdir roles/sample/handlers
    mkdir roles/sample/vars

==> vi playfile.yaml

    -  hosts: ansmachine
       roles:
       - sample

    ansible-playbook playfile.yaml  --> checks if roles is attached to server

Breaking code in file.yaml file into different yaml files in roles
------------------------------------------------------------------

==> vi roles/sample/vars/main.yaml

    file_path: /home/devops

==> vi roles/sample/tasks/main.yaml

    - name: Create a folder
      file: 
        path: "{{ file_path }}/test"
        state: directory
      notify: Create a file inside a folder

==> vi roles/sample/handlers/main.yaml

    - name: Create a file inside a folder
      file:
        path: "{{ file_path }}/test/testfile"
        state: touch

==> ansible-playbook playfile.yaml
        ---> does same jobs as file.yaml

==> ansible-galaxy init roles/newrole
      --> This create newrole directory with all default directories and yml files

