**Images and Containers**

***Containers***

    1. The Running "unit of software"
    2. Container executes the code.


***Images***

    1. Templates/Blueprints of containers
    2. It contains code + required tools/runtimes.


One Image(Application) - Multiple containers(Running instances of applications)


**Finding and Creating Images**

    1. Using pre-built images: Docker hub
        
        docker run node     : Downloads the node image and run it as container
        docker ps -a        : lists all containers
        docker run -it node : Opens an interactive shell to the container 

    2. Creating custom images: Dockerfile

        FROM node # from node image which exist on docker hub - it is a base on which we will build our application

        WORKDIR /app # where to run all the commands in the container

        COPY . /app # codes to be copied which would run on the container
        # first path: path outside the Dockerfile
        # second path: means path inside the image where the path will be copied - here app directory in the root

        RUN npm install # runs any command in the container when image is created

        EXPOSE 80 # expose a port of container to outside env

        # This should be last line of our docker file
        # as we want to start the container after all configs
        CMD ["node", "server.js"] # it runs command when container is created

        ==> CMD to build the image using docker file: docker build <path of dockerfile>
        ==> CMD to run the container of image: docker run <image name>

        ==> CMD to run the container with port exposed: docker run -p 3000:80 <image name>
                                                        Where
                                                        p stands for publish
                                                        3000 is system/client port
                                                        80 is docker container internal port

**NOTE**

    EXPOSE 80 in the Dockerfile in the end is optional. It documents that a process in the container will expose this port. But we still need to then actually expose the port with -p when running docker run. So technically, -p is the only required part when it comes to listening on a port. Still, it is a best practice to also add EXPOSE in the Dockerfile to document this behavior.

    As an additional quick side-note: For all docker commands where an ID can be used, we don't always have to copy / write out the full id.

    we can also just use the first (few) character(s) - just enough to have a unique identifier.

    So instead of

    docker run abcdefg
    
    we could also run

    docker run abc
    
    or, if there's no other image ID starting with "a", we could even run just:

    docker run a
    
    This applies to ALL Docker commands where IDs are needed.